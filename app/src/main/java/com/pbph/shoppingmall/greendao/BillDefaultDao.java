package com.pbph.shoppingmall.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pbph.shoppingmall.model.dao.BillDefault;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL_DEFAULT".
*/
public class BillDefaultDao extends AbstractDao<BillDefault, Long> {

    public static final String TABLENAME = "BILL_DEFAULT";

    /**
     * Properties of entity BillDefault.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BillSerId = new Property(1, int.class, "billSerId", false, "BILL_SER_ID");
        public final static Property BillTitle = new Property(2, String.class, "billTitle", false, "BILL_TITLE");
        public final static Property BillType = new Property(3, String.class, "billType", false, "BILL_TYPE");
        public final static Property BillIdNum = new Property(4, String.class, "billIdNum", false, "BILL_ID_NUM");
        public final static Property DefBill = new Property(5, boolean.class, "defBill", false, "DEF_BILL");
    }


    public BillDefaultDao(DaoConfig config) {
        super(config);
    }
    
    public BillDefaultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_DEFAULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BILL_SER_ID\" INTEGER NOT NULL ," + // 1: billSerId
                "\"BILL_TITLE\" TEXT NOT NULL ," + // 2: billTitle
                "\"BILL_TYPE\" TEXT NOT NULL ," + // 3: billType
                "\"BILL_ID_NUM\" TEXT," + // 4: billIdNum
                "\"DEF_BILL\" INTEGER NOT NULL );"); // 5: defBill
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_DEFAULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BillDefault entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBillSerId());
        stmt.bindString(3, entity.getBillTitle());
        stmt.bindString(4, entity.getBillType());
 
        String billIdNum = entity.getBillIdNum();
        if (billIdNum != null) {
            stmt.bindString(5, billIdNum);
        }
        stmt.bindLong(6, entity.getDefBill() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BillDefault entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBillSerId());
        stmt.bindString(3, entity.getBillTitle());
        stmt.bindString(4, entity.getBillType());
 
        String billIdNum = entity.getBillIdNum();
        if (billIdNum != null) {
            stmt.bindString(5, billIdNum);
        }
        stmt.bindLong(6, entity.getDefBill() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BillDefault readEntity(Cursor cursor, int offset) {
        BillDefault entity = new BillDefault( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // billSerId
            cursor.getString(offset + 2), // billTitle
            cursor.getString(offset + 3), // billType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // billIdNum
            cursor.getShort(offset + 5) != 0 // defBill
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BillDefault entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillSerId(cursor.getInt(offset + 1));
        entity.setBillTitle(cursor.getString(offset + 2));
        entity.setBillType(cursor.getString(offset + 3));
        entity.setBillIdNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDefBill(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BillDefault entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BillDefault entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BillDefault entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
